<tool id="raven" name="raven" version="@VERSION@">
    <description>A de novo genome assembler for long uncorrected reads</description>
    <macros>
        <token name="@VERSION@">1.1.10</token>
    </macros>
    <requirements>
    <requirement type="package" version="@VERSION@">raven-assembler</requirement>
    </requirements>
    <version_command>raven --version</version_command>
    <command detect_errors="exit_code">
        <![CDATA[
            #if $reads.is_of_type('fastqsanger', 'fastq'):
                #set $ext = 'fastq'
                #elif $reads.is_of_type('fastqsanger.gz'):
                    #set $ext = 'fastq.gz'
                #elif $reads.is_of_type('fastq'):
                    #set $ext = 'fastq'
                #elif $reads.is_of_type('fastq.gz'):
                    #set $ext = 'fastq.gz'
                #elif $reads.is_of_type('fasta.gz'):
                    #set $ext = 'fasta.gz'
                #elif $reads.is_of_type('fasta'):
                    #set $ext = 'fasta'
            #end if
            ln -s '$reads' reads.${ext} &&

            raven -t \${GALAXY_SLOTS:-4}
            -p $polishing_round
            -m $match
            -n $mismatch
            -g $gap
            --graphical-fragment-assembly graph.gfa
            #if str($cuda.use_cuda) == "yes"
                -c $cuda.cuda_batches
                $cuda.baned_alignment
                -a $cuda.cuda_alignment_batches
            #end if
            reads.${ext}
            > assembly.fa
    ]]>    </command>
    <inputs>
        <param name="reads" type="data" format="fasta,fasta.gz,fastq,fastq.gz,fastqsanger.gz,fastqsanger" multiple="false" label="Input reads" />
        <param name="polishing_round" type="integer" min="1" value="2" label="Polishing round(s)" />
        <param name="match" type="integer" min="1" value="3" label="Score for matching bases" />
        <param name="mismatch" type="integer" value="-5" label="score for mismatching bases" />
        <param name="gap" type="integer" value="-4" label="Gap penalty" />
        <conditional name="cuda">
            <param name="use_cuda" type="select" label="Use GPU-CUDA?">
                <option value="yes">Yes (Not available)</option>
                <option value="no" selected="True">No</option>
            </param>
            <when value="yes">
                <param name="cuda_batches" type="integer" min="0" value="1" label="Number of batches for CUDA accelerated polishing" />
                <param name="baned_alignment" type="boolean" truevalue="-b" falsevalue="" checked="False" label="Use banding approximation for polishing on GPU" />
                <param name="cuda_alignment_batches" type="integer" min="0" value="1" label="Number of batches for CUDA accelerated alignment" />
            </when>
        </conditional>
    </inputs>
    <outputs>
        <data name="assembly" format="fasta" from_work_dir="assembly.fa" label="${tool.name} on ${on_string} Contigs"/>
        <data name="assembly_graph" format="gfa" from_work_dir="graph.gfa" label="${tool.name} on ${on_string} Graph"/>
    </outputs>
    <tests>
    </tests>
    <help>
        <![CDATA[
        See `Documentation <https://github.com/lbcb-sci/raven>_`
    ]]>
    </help>
</tool>
