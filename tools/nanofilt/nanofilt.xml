<tool id="nanofilt" name="NanoFilt"  version="0.1.0">
  <description>Filtering and trimming of long read sequencing data</description>
  <requirements>
    <requirement type="package" version="2.3.0">nanofilt</requirement>
  </requirements>
  <command detect_errors="exit_code"><![CDATA[
    NanoFilt 
    #if str($filter.quality) != ""
    -q ${filter.quality} 
    #end if
    #if str($filter.minlength) != ""
    --length ${filter.minlength} 
    #end if
    #if str($filter.maxlength) != ""
    --maxlength ${filter.maxlength}
    #end if
    #if str($crop.head) != ""
    --headcrop ${crop.head}
    #end if
    #if str($crop.tail) != ""
    --tailcrop ${crop.tail}
    #end if
    #if $summary.selector
    --readtype "${summary.readtype}"
    --summary "${summary.summary_file}"
    #end if
    --logfile $logfile  
    "$input1" > "$output1"
    ]]></command>
  <inputs>
    <param type="data" name="input1" format="fastqsanger" label="uncompressed fastq file" />
    <section name="filter" title="Options for filtering reads based on length or quality">  
      <param name="quality"  type="integer" label="Filter on a minimum average read quality score" value="30" min="0" max="255" help="(-q)" optional="true" />
      <param name="maxlength" type="integer" label="Filter on a maximum read length" help="(--maxlength)" optional="true" />
      <param name="minlength" type="integer" label="Filter on a minimum read length" help="(--length)" optional="true" />
    </section>
    <section name="crop" title="Options for trimming reads">  
      <param name="head" type="integer" label="Trim n nucleotides from start of read" help="(--headcrop)" optional="true" />
      <param name="tail" type="integer" label="Trim n nucleotides from end of read" help="(--tailcrop)" optional="true" />
    </section>
    <conditional name="summary">
      <param name="selector" type="boolean" checked="false" label="Use albacore or guppy summary file for quality scores"/>
      <when value="true">
        <param type="data" name="summary_file" format="tabular" label="Summary file generated by albacore or guppy."/>
        <param name="readtype" argument="--readtype" type="select" label="Which read type to extract information about from summary">
          <option value="1D" selected="true">1D</option>
          <option value="2D">2D</option>
          <option value="1D2">1D2</option>
        </param>
      </when>
      <when value="false">
        <param name="minGC" type="float" label="Sequences must have GC content higher than this" min="0.0" max="1.0" help="(--minGC)" optional="true" />
        <param name="maxGC" type="float" label="Sequences must have GC content lower than this" min="0.0" max="1.0" help="(--maxGC)" optional="true" />
      </when>
    </conditional>
  </inputs>
  <outputs>
    <data name="output1" format="fastq" />
    <data name="logfile" format="tabular" label="Log file" from_work_dir="logfile.txt" />
  </outputs>
  <tests>
    <test>
      <param name="input1" value="input.fastq"/>
      <output name="output1" file="output.fastq"/>
    </test>
  </tests>
  <help><![CDATA[
    usage: NanoFilt [-h] [-v] [--logfile LOGFILE] [-l LENGTH] [--maxlength MAXLENGTH] 
    [-q QUALITY] [--minGC MINGC] [--maxGC MAXGC] [--headcrop HEADCROP] [--tailcrop TAILCROP] 
    [-s SUMMARY] [--readtype {1D,2D,1D2}]

    Perform quality and/or length and/or GC filtering of (long read) fastq data.           Reads on stdin.

    EXAMPLES:

    gunzip -c reads.fastq.gz | NanoFilt -q 10 -l 500 --headcrop 50 | minimap2 genome.fa - | samtools sort -O BAM -@24 -o alignment.bam -

    gunzip -c reads.fastq.gz | NanoFilt -q 12 --headcrop 75 | gzip > trimmed-reads.fastq.gz


    ]]></help>
  <citations>
    <citation type="bibtex">
      @misc{githubnanofilt,
      title = {nanofilt},
      publisher = {GitHub},
      journal = {GitHub repository},
      url = {https://github.com/wdecoster/nanofilt}
      }
      @article{10.1093/bioinformatics/bty149,
      author = {De Coster, Wouter and Dâ€™Hert, Svenn and Schultz, Darrin T and Cruts, Marc and Van Broeckhoven, Christine},
      title = "{NanoPack: visualizing and processing long-read sequencing data}",
      journal = {Bioinformatics},
      volume = {34},
      number = {15},
      pages = {2666-2669},
      year = {2018},
      month = {03},
      abstract = "{Here we describe NanoPack, a set of tools developed for visualization and processing of long-read sequencing data from Oxford Nanopore Technologies and Pacific Biosciences.The NanoPack tools are written in Python3 and released under the GNU GPL3.0 License. The source code can be found at https://github.com/wdecoster/nanopack, together with links to separate scripts and their documentation. The scripts are compatible with Linux, Mac OS and the MS Windows 10 subsystem for Linux and are available as a graphical user interface, a web service at http://nanoplot.bioinf.be and command line tools.Supplementary data are available at Bioinformatics online.}",
      issn = {1367-4803},
      doi = {10.1093/bioinformatics/bty149},
      url = {https://doi.org/10.1093/bioinformatics/bty149},
      eprint = {http://oup.prod.sis.lan/bioinformatics/article-pdf/34/15/2666/25230836/bty149.pdf},
      }
    </citation>
  </citations>
</tool>
